# -*- coding: utf-8 -*-
"""API fact check running.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kkMIxSxAegPobGf7ytKZ9q2v3QuC6xk7
"""

# !pip install flask pyngrok flask-sqlalchemy requests flask-cors nltk --quiet
from flask import Flask, request, jsonify, render_template_string
from flask_sqlalchemy import SQLAlchemy
from flask_cors import CORS
from pyngrok import ngrok
import requests
from datetime import datetime
import os
import json
import nltk
import re

# Download NLTK data
nltk.download('punkt', quiet=True)
nltk.download('stopwords', quiet=True)

# Initialize Flask
app = Flask(__name__)
CORS(app)  # Add CORS support for frontend requests

# Configure SQLite database
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///factchecks.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)

# Try to get Google API key securely
try:
    from google.colab import userdata
    GOOGLE_API_KEY = userdata.get('GOOGLE_API_KEY')
except:
    # Fallback if not in Colab or key not set
    GOOGLE_API_KEY = os.environ.get('GOOGLE_API_KEY')

# Database Model
class FactCheckResult(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    claim = db.Column(db.String(500), nullable=False)
    rating = db.Column(db.String(50))
    source = db.Column(db.String(100))
    url = db.Column(db.String(500))
    timestamp = db.Column(db.DateTime, default=datetime.utcnow)

# Create tables
with app.app_context():
    db.create_all()

# Simple HTML frontend with improved styling
HOMEPAGE = '''
<!DOCTYPE html>
<html>
<head>
    <title>Fact Check API</title>
    <style>
        body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; background-color: #f9f9f9; }
        h1 { color: #2c3e50; text-align: center; }
        .form-group { margin-bottom: 15px; }
        label { display: block; margin-bottom: 5px; font-weight: bold; }
        input[type="text"] { width: 100%; padding: 12px; font-size: 16px; border: 1px solid #ddd; border-radius: 4px; box-sizing: border-box; }
        button { background: #3498db; color: white; border: none; padding: 12px 20px; cursor: pointer; width: 100%; font-size: 16px; border-radius: 4px; }
        button:hover { background: #2980b9; }
        #result { margin-top: 20px; border: 1px solid #ddd; padding: 15px; border-radius: 4px; white-space: pre-wrap; background-color: white; }
        .loading { color: #7f8c8d; text-align: center; }
        .alert { padding: 10px; margin-bottom: 15px; border-radius: 4px; }
        .alert-info { background-color: #d1ecf1; border: 1px solid #bee5eb; color: #0c5460; }
        .alert-success { background-color: #d4edda; border: 1px solid #c3e6cb; color: #155724; }
        .alert-warning { background-color: #fff3cd; border: 1px solid #ffeeba; color: #856404; }
        .alert-danger { background-color: #f8d7da; border: 1px solid #f5c6cb; color: #721c24; }
    </style>
</head>
<body>
    <h1>Fact Check API</h1>
    <div class="alert alert-info">
        Enter a claim below to check its factual accuracy. Our system will analyze the claim and provide results.
    </div>
    <div class="form-group">
        <label for="claim">Enter a claim to fact check:</label>
        <input type="text" id="claim" placeholder="e.g., The earth is flat">
    </div>
    <button onclick="checkFact()">Check Fact</button>
    <div id="result"></div>

    <script>
        async function checkFact() {
            const claim = document.getElementById('claim').value;
            if (!claim) return;

            const resultDiv = document.getElementById('result');
            resultDiv.innerHTML = '<p class="loading">Processing your request...</p>';

            try {
                const response = await fetch('/fact-check', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ claim }),
                });

                const data = await response.json();

                // Format the response nicely
                let html = '<h3>Results:</h3>';

                if (data.results && data.results.length > 0) {
                    html += '<div class="alert alert-success">Fact check completed successfully!</div>';
                    html += '<ul>';
                    data.results.forEach(result => {
                        html += `<li><strong>Rating:</strong> ${result.rating}<br>`;
                        html += `<strong>Source:</strong> ${result.source}<br>`;
                        if (result.url) html += `<a href="${result.url}" target="_blank">Read more</a>`;
                        html += '</li>';
                    });
                    html += '</ul>';
                } else if (data.basic_check) {
                    const alertClass = data.basic_check.likely_true ? 'alert-success' : 'alert-danger';
                    html += `<div class="alert ${alertClass}">${data.basic_check.assessment}</div>`;
                    if (data.basic_check.explanation) {
                        html += `<p>${data.basic_check.explanation}</p>`;
                    }
                } else if (data.error) {
                    html += `<div class="alert alert-warning">We encountered an issue: ${data.error}</div>`;
                    html += '<p>Using fallback fact checking method.</p>';
                }

                resultDiv.innerHTML = html;
            } catch (error) {
                resultDiv.innerHTML = `<div class="alert alert-danger">Error: ${error.message}</div>`;
            }
        }
    </script>
</body>
</html>
'''

# Simple knowledge base for fallback fact checking
KNOWLEDGE_BASE = {
    "earth flat": {
        "likely_true": False,
        "assessment": "The claim that the Earth is flat is FALSE.",
        "explanation": "Scientific evidence overwhelmingly confirms that the Earth is roughly spherical. This has been proven through satellite imagery, circumnavigation, physics of gravity, and direct observation of the Earth's curvature."
    },
    "climate change": {
        "likely_true": True,
        "assessment": "Climate change is real and primarily caused by human activities.",
        "explanation": "Scientific consensus based on thousands of studies shows that global warming and climate change are occurring and are primarily caused by human activities, especially the burning of fossil fuels."
    },
    "vaccines autism": {
        "likely_true": False,
        "assessment": "Vaccines do NOT cause autism.",
        "explanation": "Multiple large-scale studies have found no link between vaccines and autism. The original study that suggested this connection was retracted due to serious procedural errors and ethical violations."
    }
}

def basic_fact_check(claim):
    """Simple keyword-based fact checking when API fails"""
    claim_lower = claim.lower()

    # Check against our simple knowledge base
    for key, info in KNOWLEDGE_BASE.items():
        if all(word in claim_lower for word in key.split()):
            return info

    # Default response if no match
    return {
        "likely_true": None,
        "assessment": "Unable to verify this specific claim with our fallback system.",
        "explanation": "We couldn't determine the veracity of this claim with our basic fact-checking system. Please check reliable sources for more information."
    }

@app.route('/')
def home():
    return render_template_string(HOMEPAGE)

@app.route('/fact-check', methods=['POST'])
def check_claim():
    data = request.json if request.is_json else request.form.to_dict()
    claim = data.get('claim')

    if not claim:
        return jsonify({"error": "Missing claim"}), 400

    if not GOOGLE_API_KEY:
        # Use fallback if no API key
        basic_result = basic_fact_check(claim)
        return jsonify({
            "claim": claim,
            "message": "Claim processed with fallback system",
            "basic_check": basic_result
        })

    try:
        # Call Google Fact Check API
        params = {
            'query': claim,
            'key': GOOGLE_API_KEY,
            'languageCode': 'en'
        }

        response = requests.get(
            'https://factchecktools.googleapis.com/v1alpha1/claims:search',
            params=params,
            timeout=10  # Add timeout
        )
        response.raise_for_status()

        results = response.json().get('claims', [])
        processed_results = []

        # Process and store results
        for result in results:
            review = result.get('claimReview', [{}])[0]
            factcheck = FactCheckResult(
                claim=claim,
                rating=review.get('textualRating', 'No rating'),
                source=result.get('publisher', {}).get('name', 'Unknown'),
                url=review.get('url', '')
            )
            db.session.add(factcheck)

            processed_results.append({
                "rating": factcheck.rating,
                "source": factcheck.source,
                "url": factcheck.url
            })

        db.session.commit()

        if not processed_results:
            # No results from API, use fallback
            basic_result = basic_fact_check(claim)
            return jsonify({
                "claim": claim,
                "message": "No API results found, using fallback",
                "results": [],
                "basic_check": basic_result
            })

        return jsonify({
            "claim": claim,
            "results": processed_results[:3],  # Return top 3 results
            "total_found": len(results)
        })

    except Exception as e:
        # API call failed, use fallback
        basic_result = basic_fact_check(claim)
        return jsonify({
            "claim": claim,
            "message": "Claim received",
            "error": str(e),
            "basic_check": basic_result
        })

# Add alerts endpoint
@app.route('/alerts', methods=['GET'])
def get_alerts():
    # Check for contradiction spikes
    try:
        recent_checks = FactCheckResult.query.order_by(FactCheckResult.timestamp.desc()).limit(10).all()
        contradictions = [check for check in recent_checks if check.rating and
                         ("false" in check.rating.lower() or
                          "mostly false" in check.rating.lower() or
                          "pants on fire" in check.rating.lower())]

        alert_level = "Low"
        if len(contradictions) >= 7:
            alert_level = "High"
        elif len(contradictions) >= 4:
            alert_level = "Medium"

        return jsonify({
            "alert_level": alert_level,
            "contradictions_count": len(contradictions),
            "recent_checks": len(recent_checks),
            "recent_contradictions": [
                {"claim": c.claim, "rating": c.rating, "source": c.source}
                for c in contradictions[:3]  # Top 3 contradictions
            ]
        })
    except Exception as e:
        return jsonify({"error": str(e)}), 500

# Start ngrok tunnel
try:
    public_url = ngrok.connect(5000).public_url
    print(f"\n🔥 ACCESS YOUR FACT CHECK API HERE: {public_url}\n")
except Exception as e:
    print(f"Could not start ngrok: {str(e)}")
    public_url = "http://127.0.0.1:5000"

# Start server
if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
